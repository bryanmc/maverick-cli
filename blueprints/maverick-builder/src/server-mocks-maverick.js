/*jshint node:true*/
/**
 * Generated by Maverick CLI
 */
module.exports = function (app) {
    var express = require('express');
    var bodyParser = require('body-parser');
    var maverickRouter = express.Router();
    var shell = require('shelljs');
    var fs = require('fs');
    var path = require('path');
    
    app.use(bodyParser.urlencoded());
    app.use(bodyParser.json());

    maverickRouter.get('/', function (req, res) {
        //shell.exec("ember g maverick-builder");
        res.send({ project: { id: 1, number: 123, name: 'Fooshnickins' } });
    });
    
    maverickRouter.get('/rec-dir-scan/:path', function (req, res) {
        var path = req.params.path;
        
        function walk(currentDirPath, callback) {
            var fs = require('fs'); 
            var path = require('path');
            fs.readdir(currentDirPath, function (err, files) {
                if (err) {
                    throw new Error(err);
                }
                files.forEach(function (name) {
                    var filePath = path.join(currentDirPath, name);
                    var stat = fs.statSync(filePath);
                    if (stat.isFile()) {
                        callback(filePath, stat);
                    } else if (stat.isDirectory()) {
                        walk(filePath, callback);
                    }
                });
            });
        }
        
        var paths = [];
        
        if (path === "root"){
            path = "./";
            paths.push(path);
        }else if(path === "selected"){
            // paths.push('app');
            // paths.push('config');
            paths.push('node_modules/maverick-cli/addon');
            // paths.push('node_modules/maverick-cli');
            // paths.push('node_modules/maverick-cli');
            // paths.push('server');
        }else if(path === "typeahead"){
            paths.push('app');
            paths.push('config');
            paths.push('node_modules/maverick-cli');
            paths.push('server');
        }else{
            path = path.replace(/,/g, '/');
            paths.push(path);
        }
        
        var pathsArray = [];
        paths = paths.sort();
        for (var index = 0; index < paths.length; index++) {
            var item = paths[index];
            walk(item, function(item, stat){
                if ( item.indexOf('.git') === -1 ){
                    var commaPath = item.replace(/\//g, ',');
                    var object = {};
                    object.html = '<li class="file" data-file-path="'+commaPath+'"><i class="fa fa-icon fa-file"></i> '+item+'</li>';
                    object.dirHtml = '<li class="directory"><i class="fa fa-icon fa-folder"></i><span class="replace-dir-name">directory name</span></li>';
                    object.path = item;
                    object.commaPath = commaPath;
                    pathsArray.push(object);
                }
            });
        }

        var currentArrayLength = 0;
        var newArrayLength = 0;
        var poll = setInterval(function(){

            newArrayLength = pathsArray.length;
            if (currentArrayLength === newArrayLength){
                res.send({results: pathsArray});
                clearInterval(poll);
            }else{
                currentArrayLength = newArrayLength;
            }
            
        },1000);
        
        
    });

    maverickRouter.get('/read-file/:path', function (req, res) {
        var srcFilePath = req.params.path;
        srcFilePath = srcFilePath.replace(/,/g, '/');
        try {
            var contents = fs.readFileSync(srcFilePath, 'utf8');
            res.send(contents);
        } catch (error) {
            res.send("No file found: "+srcFilePath);
        }
    });
    
    maverickRouter.get('/generate-blueprint/:name/:type', function (req, res) {
        var name = req.params.name;
        var type = req.params.type;
        
        shell.exec("ember g "+type+" "+name);
        
        res.send({"status": "success"});
    });
    
    maverickRouter.post('/save-file', function (req, res) {
        var body = req.body;
        var filePath = body.filePath.replace(/,/g, '/');
        if ( typeof body.content !== 'undefined' ){
            var contents = body.content;
            fs.writeFileSync(filePath, contents);
            res.send({contents: contents, file: filePath});
        }else{
            res.send("empty file");
        }
    });
    
    maverickRouter.post('/command-line', function (req, res) {
        var body = req.body;
        if ( typeof body.content !== 'undefined' ){
            var output = shell.exec(body.content);
            res.send({"status":"success", "output": output, "command": body.content});
        }else{
            res.send({"status":"error", "message":"no command provided"});
        }
    });

    maverickRouter.get('/update-ember', function (req, res) {
        var cmd = shell.exec("ember g update-ember");
        res.send(cmd);
    });

    maverickRouter.get('/action/:step', function (req, res) {
        var params = req.params;
        var cmd = shell.exec("ember g " + params.step + "");
        res.send(cmd);
    });

    maverickRouter.get('/maverick-file-check/:step/:file', function (req, res) {
        var params = req.params;
        var cmd = shell.exec("ember g maverick-file-check " + params.step + " " + params.file);
        res.send(cmd);
    });

    maverickRouter.get('/check/:step', function (req, res) {
        var params = req.params;
        var cmd = shell.exec("ember g " + params.step + "-check");
        res.send(cmd);
    });

    maverickRouter.get('/:id', function (req, res) {
        res.send({
            'maverick': {
                id: req.params.id
            }
        });
    });

    // The POST and PUT call will not contain a request body
    // because the body-parser is not included by default.
    // To use req.body, run:

    //    npm install --save-dev body-parser

    // After installing, you need to `use` the body-parser for
    // this mock uncommenting the following line:
    //
    
    app.use('/api/maverick', maverickRouter);
};
